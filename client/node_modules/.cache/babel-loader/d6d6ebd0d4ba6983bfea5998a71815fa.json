{"ast":null,"code":"// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n}; // Map to retrieve localStorage values\n\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\nconst hasTokenExpired = () => {\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n};\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error');\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    /* store query params in local storage */\n    for (const prop in queryParams) {\n      window.localStorage.setItem(prop, queryParams[prop]);\n    }\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  return false;\n};\n\nexport const accessToken = getAccessToken();","map":{"version":3,"names":["LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","hasTokenExpired","getAccessToken","queryString","location","search","urlParams","URLSearchParams","queryParams","get","hasError","prop","setItem","Date","now"],"sources":["/Users/kimlinh/CodePath/Capstone-Project/client/src/components/Dashboard/spotify.js"],"sourcesContent":["// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp',\n}\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n};\n\nconst hasTokenExpired = () => {\n  const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES\n  \n}\n\nconst getAccessToken = () => {\n  const queryString = window.location.search\n  const urlParams = new URLSearchParams(queryString)\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')   \n  }\n  const hasError = urlParams.get('error')\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken()\n  }\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken\n  }\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    /* store query params in local storage */\n    for (const prop in queryParams) {\n      window.localStorage.setItem(prop, queryParams[prop])\n    }\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\n    return queryParams[LOCALSTORAGE_KEYS.accessToken]\n  }\n\n  return false\n}\n\nexport const accessToken = getAccessToken()"],"mappings":"AAAA;AACA,MAAMA,iBAAiB,GAAG;EACxBC,WAAW,EAAE,sBADW;EAExBC,YAAY,EAAE,uBAFU;EAGxBC,UAAU,EAAE,2BAHY;EAIxBC,SAAS,EAAE;AAJa,CAA1B,C,CAOA;;AACA,MAAMC,mBAAmB,GAAG;EAC1BJ,WAAW,EAAEK,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACC,WAA9C,CADa;EAE1BC,YAAY,EAAEI,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACE,YAA9C,CAFY;EAG1BC,UAAU,EAAEG,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACG,UAA9C,CAHc;EAI1BC,SAAS,EAAEE,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,iBAAiB,CAACI,SAA9C;AAJe,CAA5B;;AAOA,MAAMK,eAAe,GAAG,MAAM;EAC5B,MAAM;IAAER,WAAF;IAAeG,SAAf;IAA0BD;EAA1B,IAAyCE,mBAA/C;AAED,CAHD;;AAKA,MAAMK,cAAc,GAAG,MAAM;EAC3B,MAAMC,WAAW,GAAGL,MAAM,CAACM,QAAP,CAAgBC,MAApC;EACA,MAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBJ,WAApB,CAAlB;EACA,MAAMK,WAAW,GAAG;IAClB,CAAChB,iBAAiB,CAACC,WAAnB,GAAiCa,SAAS,CAACG,GAAV,CAAc,cAAd,CADf;IAElB,CAACjB,iBAAiB,CAACE,YAAnB,GAAkCY,SAAS,CAACG,GAAV,CAAc,eAAd,CAFhB;IAGlB,CAACjB,iBAAiB,CAACG,UAAnB,GAAgCW,SAAS,CAACG,GAAV,CAAc,YAAd;EAHd,CAApB;EAKA,MAAMC,QAAQ,GAAGJ,SAAS,CAACG,GAAV,CAAc,OAAd,CAAjB;;EAEA,IAAIC,QAAQ,IAAIT,eAAe,EAA3B,IAAiCJ,mBAAmB,CAACJ,WAApB,KAAoC,WAAzE,EAAsF;IACpFC,YAAY;EACb;;EAED,IAAIG,mBAAmB,CAACJ,WAApB,IAAmCI,mBAAmB,CAACJ,WAApB,KAAoC,WAA3E,EAAwF;IACtF,OAAOI,mBAAmB,CAACJ,WAA3B;EACD;;EAED,IAAIe,WAAW,CAAChB,iBAAiB,CAACC,WAAnB,CAAf,EAAgD;IAC9C;IACA,KAAK,MAAMkB,IAAX,IAAmBH,WAAnB,EAAgC;MAC9BV,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BD,IAA5B,EAAkCH,WAAW,CAACG,IAAD,CAA7C;IACD;;IACDb,MAAM,CAACC,YAAP,CAAoBa,OAApB,CAA4BpB,iBAAiB,CAACI,SAA9C,EAAyDiB,IAAI,CAACC,GAAL,EAAzD;IACA,OAAON,WAAW,CAAChB,iBAAiB,CAACC,WAAnB,CAAlB;EACD;;EAED,OAAO,KAAP;AACD,CA5BD;;AA8BA,OAAO,MAAMA,WAAW,GAAGS,cAAc,EAAlC"},"metadata":{},"sourceType":"module"}