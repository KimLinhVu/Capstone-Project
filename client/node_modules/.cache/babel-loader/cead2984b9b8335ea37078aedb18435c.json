{"ast":null,"code":"import axios from 'axios'; // Map for localStorage keys\n\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp'\n}; // Map to retrieve localStorage values\n\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp)\n};\n\nconst hasTokenExpired = () => {\n  const {\n    accessToken,\n    timestamp,\n    expireTime\n  } = LOCALSTORAGE_VALUES;\n\n  if (!accessToken || !timestamp) {\n    return false;\n  }\n\n  const timeElapsed = Date.now() - Number(timestamp);\n  return timeElapsed / 1000 > Number(expireTime);\n};\n\nexport const logout = () => {\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property]);\n  }\n\n  window.location = window.location.origin;\n};\n\nconst refreshToken = async () => {\n  try {\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000 < 1000) {\n      console.error('No refresh token available');\n      logout();\n    }\n\n    const {\n      data\n    } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token);\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n    window.location.reload();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getAccessToken = () => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')\n  };\n  const hasError = urlParams.get('error');\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken();\n  }\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken;\n  }\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    /* store query params in local storage */\n    for (const prop in queryParams) {\n      window.localStorage.setItem(prop, queryParams[prop]);\n    }\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now());\n    return queryParams[LOCALSTORAGE_KEYS.accessToken];\n  }\n\n  return false;\n};\n\nexport const accessToken = getAccessToken();\n/* axios global request headers */\n\naxios.defaults.baseURL = 'https://api.spotify.com/v1';\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`;\naxios.defaults.headers['Content-Type'] = 'application/json';\nexport const getCurrentUserProfile = () => {};","map":{"version":3,"names":["axios","LOCALSTORAGE_KEYS","accessToken","refreshToken","expireTime","timestamp","LOCALSTORAGE_VALUES","window","localStorage","getItem","hasTokenExpired","timeElapsed","Date","now","Number","logout","property","removeItem","location","origin","console","error","data","get","setItem","access_token","reload","log","getAccessToken","queryString","search","urlParams","URLSearchParams","queryParams","hasError","prop","defaults","baseURL","headers","getCurrentUserProfile"],"sources":["/Users/kimlinh/CodePath/Capstone-Project/client/src/components/Dashboard/spotify.js"],"sourcesContent":["import axios from 'axios'\n// Map for localStorage keys\nconst LOCALSTORAGE_KEYS = {\n  accessToken: 'spotify_access_token',\n  refreshToken: 'spotify_refresh_token',\n  expireTime: 'spotify_token_expire_time',\n  timestamp: 'spotify_token_timestamp',\n}\n\n// Map to retrieve localStorage values\nconst LOCALSTORAGE_VALUES = {\n  accessToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.accessToken),\n  refreshToken: window.localStorage.getItem(LOCALSTORAGE_KEYS.refreshToken),\n  expireTime: window.localStorage.getItem(LOCALSTORAGE_KEYS.expireTime),\n  timestamp: window.localStorage.getItem(LOCALSTORAGE_KEYS.timestamp),\n};\n\nconst hasTokenExpired = () => {\n  const { accessToken, timestamp, expireTime } = LOCALSTORAGE_VALUES\n  if (!accessToken || !timestamp) {\n    return false\n  }\n\n  const timeElapsed = Date.now() - Number(timestamp)\n  return (timeElapsed / 1000) > Number(expireTime)\n}\n\nexport const logout = () => {\n  for (const property in LOCALSTORAGE_KEYS) {\n    window.localStorage.removeItem(LOCALSTORAGE_KEYS[property])\n  }\n\n  window.location = window.location.origin\n}\n\nconst refreshToken = async () => {\n  try {\n    if (!LOCALSTORAGE_VALUES.refreshToken || LOCALSTORAGE_VALUES.refreshToken === 'undefined' || \n      (Date.now() - Number(LOCALSTORAGE_VALUES.timestamp) / 1000) < 1000) {\n      console.error('No refresh token available')\n      logout()\n    }\n    const { data } = await axios.get(`/refresh_token?refresh_token=${LOCALSTORAGE_VALUES.refreshToken}`)\n\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.accessToken, data.access_token)\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\n\n    window.location.reload()\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nconst getAccessToken = () => {\n  const queryString = window.location.search\n  const urlParams = new URLSearchParams(queryString)\n  const queryParams = {\n    [LOCALSTORAGE_KEYS.accessToken]: urlParams.get('access_token'),\n    [LOCALSTORAGE_KEYS.refreshToken]: urlParams.get('refresh_token'),\n    [LOCALSTORAGE_KEYS.expireTime]: urlParams.get('expires_in')   \n  }\n  const hasError = urlParams.get('error')\n\n  if (hasError || hasTokenExpired() || LOCALSTORAGE_VALUES.accessToken === 'undefined') {\n    refreshToken()\n  }\n\n  if (LOCALSTORAGE_VALUES.accessToken && LOCALSTORAGE_VALUES.accessToken !== 'undefined') {\n    return LOCALSTORAGE_VALUES.accessToken\n  }\n\n  if (queryParams[LOCALSTORAGE_KEYS.accessToken]) {\n    /* store query params in local storage */\n    for (const prop in queryParams) {\n      window.localStorage.setItem(prop, queryParams[prop])\n    }\n    window.localStorage.setItem(LOCALSTORAGE_KEYS.timestamp, Date.now())\n    return queryParams[LOCALSTORAGE_KEYS.accessToken]\n  }\n\n  return false\n}\n\nexport const accessToken = getAccessToken()\n\n/* axios global request headers */\naxios.defaults.baseURL = 'https://api.spotify.com/v1'\naxios.defaults.headers['Authorization'] = `Bearer ${accessToken}`\naxios.defaults.headers['Content-Type'] = 'application/json'\n\nexport const getCurrentUserProfile = () => {\n  \n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}